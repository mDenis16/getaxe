#include "menu.hpp"
#include "../../dependencies/utilities/csgo.hpp"
/* include imgui */
#include "ImGui/imgui.h"
#include "ImGui/imgui_internal.h"
#include "ImGui/impl/imgui_impl_dx9.h"
#include "ImGui/impl/imgui_impl_win32.h"
#include <string>
#include <functional>
#include "../menu/render/menu_render.hpp"
#include "variables.hpp"
#include "../features/features.hpp"


IDirect3DTexture9* tImage = nullptr;
const BYTE left_arrow[] = { 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xC8, 0x08, 0x06, 0x00, 0x00, 0x00, 0xAD, 0x58, 0xAE,
0x9E, 0x00, 0x00, 0x00, 0x04, 0x73, 0x42, 0x49, 0x54, 0x08, 0x08, 0x08, 0x08, 0x7C, 0x08, 0x64,
0x88, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x08, 0x92, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C,
0xED, 0xDD, 0x7D, 0xCC, 0x95, 0x75, 0x1D, 0xC7, 0xF1, 0xF7, 0xCD, 0x2D, 0xA1, 0x08, 0x08, 0x02,
0x92, 0x92, 0x51, 0x48, 0x8A, 0x52, 0x96, 0x86, 0x99, 0x63, 0x6A, 0x65, 0xC2, 0xC4, 0x4C, 0xF2,
0x61, 0xA3, 0x74, 0x2E, 0x1B, 0x91, 0xB5, 0x1C, 0x35, 0x2B, 0x33, 0x57, 0xDA, 0xCC, 0x59, 0xB9,
0x74, 0x96, 0x4B, 0xB3, 0x87, 0x95, 0x33, 0x9B, 0xCC, 0x72, 0x95, 0xE6, 0x30, 0x63, 0x89, 0x59,
0x61, 0x66, 0xD8, 0x03, 0x3E, 0x96, 0x92, 0x3C, 0x84, 0x88, 0x06, 0x22, 0x37, 0x4F, 0x37, 0x77,
0x7F, 0xFC, 0xC6, 0x3F, 0xB8, 0xD2, 0xB8, 0xAE, 0xF3, 0x39, 0xE7, 0x3A, 0xBC, 0x5F, 0xDB, 0xF5,
0xEF, 0xC5, 0xEF, 0xB3, 0xF1, 0xB9, 0x77, 0xCE, 0xB9, 0x7E, 0xD7, 0xF7, 0x07, 0x92, 0x24, 0x49,
0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
0xD4, 0x25, 0x7A, 0xDB, 0xBD, 0x00, 0x75, 0xBC, 0xF1, 0xC0, 0x24, 0x60, 0x0C, 0xB0, 0x05, 0xD8,
0xD4, 0xDE, 0xE5, 0x48, 0xED, 0x37, 0x05, 0xB8, 0x0E, 0x58, 0x05, 0x0C, 0xEC, 0x74, 0x3D, 0x0A,
0x5C, 0x06, 0x8C, 0x6B, 0xDB, 0xEA, 0xA4, 0x36, 0xD9, 0x1B, 0xB8, 0x1E, 0xE8, 0xE7, 0xA5, 0xC5,
0xD8, 0xF9, 0x5A, 0x0F, 0x9C, 0xDB, 0x9E, 0x65, 0x4A, 0x79, 0xAF, 0x06, 0xFE, 0xCC, 0xCB, 0x17,
0x63, 0xE7, 0xEB, 0xD2, 0x36, 0xAC, 0x55, 0x8A, 0x3A, 0x10, 0x78, 0x8C, 0xFF, 0xBF, 0x1C, 0x3B,
0xAE, 0xF3, 0xF2, 0x4B, 0x96, 0x32, 0x26, 0x02, 0x4F, 0xB1, 0xEB, 0xE5, 0x18, 0xA0, 0x7C, 0x71,
0x3F, 0x24, 0xBC, 0x6E, 0xA9, 0xE5, 0x26, 0x03, 0x2B, 0xA8, 0x56, 0x8E, 0x1D, 0xD7, 0xFC, 0xF0,
0xDA, 0xA5, 0x96, 0x3A, 0x1C, 0x58, 0x4D, 0x3D, 0xE5, 0x18, 0x00, 0xB6, 0x02, 0xA3, 0xA3, 0x09,
0xA4, 0x16, 0x39, 0x0A, 0x58, 0x4B, 0x7D, 0xE5, 0xD8, 0x71, 0x9D, 0x9E, 0x0C, 0x91, 0x30, 0xA8,
0xDD, 0x0B, 0x50, 0xDC, 0x34, 0xE0, 0x6E, 0x60, 0xDF, 0x16, 0xDC, 0x7B, 0x72, 0x0B, 0xEE, 0xD9,
0x56, 0x16, 0x64, 0xF7, 0x72, 0x02, 0xB0, 0x00, 0x18, 0xD1, 0xA2, 0xFB, 0x0F, 0x6B, 0xD1, 0x7D,
0xDB, 0xC6, 0x82, 0xEC, 0x3E, 0x66, 0x02, 0xB7, 0x53, 0x1E, 0x06, 0xB6, 0xCA, 0xBA, 0x16, 0xDE,
0x5B, 0x6A, 0x99, 0xD3, 0x80, 0xCD, 0xD4, 0xFF, 0x9D, 0x63, 0xE7, 0xEB, 0xBD, 0xA9, 0x40, 0x52,
0x5D, 0xCE, 0x02, 0xB6, 0xD1, 0xFA, 0x72, 0x6C, 0x06, 0x46, 0x86, 0x32, 0x49, 0xB5, 0x98, 0xC3,
0x2B, 0xDB, 0x57, 0x55, 0xC7, 0x75, 0x53, 0x28, 0x93, 0x54, 0x8B, 0xF3, 0x81, 0xED, 0x64, 0xCA,
0xD1, 0x07, 0x1C, 0x94, 0x89, 0x25, 0x55, 0x77, 0x21, 0x99, 0x62, 0xEC, 0xB8, 0xE6, 0x64, 0x62,
0x49, 0xD5, 0x7D, 0x91, 0x6C, 0x39, 0x3E, 0x9B, 0x89, 0x25, 0x55, 0x77, 0x25, 0xD9, 0x72, 0xCC,
0xCB, 0xC4, 0x92, 0xAA, 0xE9, 0x01, 0xAE, 0x25, 0x57, 0x8C, 0x7E, 0x60, 0x6E, 0x24, 0x99, 0x54,
0xD1, 0x20, 0xE0, 0x7B, 0xE4, 0xCA, 0xB1, 0x0D, 0x38, 0x3B, 0x92, 0x4C, 0xAA, 0x68, 0x0F, 0xE0,
0x47, 0xE4, 0xCA, 0xB1, 0x05, 0x38, 0x23, 0x92, 0x4C, 0xAA, 0xE8, 0x55, 0xC0, 0x6D, 0xE4, 0xCA,
0xD1, 0x07, 0x9C, 0x1C, 0x49, 0x26, 0x55, 0xB4, 0x17, 0x70, 0x27, 0xB9, 0x72, 0x6C, 0xA0, 0x6C,
0x74, 0x94, 0x3A, 0xDE, 0x30, 0x60, 0x21, 0xB9, 0x72, 0xAC, 0xA3, 0x6C, 0x91, 0x97, 0x3A, 0xDE,
0x3E, 0xC0, 0x7D, 0xE4, 0xCA, 0xB1, 0x16, 0x98, 0x1A, 0x49, 0x26, 0x55, 0x34, 0x1A, 0x78, 0x80,
0x5C, 0x39, 0x56, 0x53, 0x5E, 0xCB, 0x95, 0x3A, 0xDE, 0x38, 0x76, 0x6D, 0x66, 0xD5, 0xAE, 0x5E,
0xCB, 0xE9, 0xC2, 0xB7, 0x03, 0xD5, 0x9D, 0xC6, 0x03, 0x8F, 0x90, 0x2B, 0xC7, 0x93, 0x94, 0x51,
0x40, 0x52, 0xC7, 0x7B, 0x3D, 0xF0, 0x0F, 0x72, 0xE5, 0x78, 0x8C, 0x32, 0x44, 0x4E, 0xEA, 0x78,
0x07, 0x03, 0x4F, 0x93, 0x2B, 0xC7, 0x5F, 0x29, 0xE3, 0x47, 0xA5, 0x8E, 0xF7, 0x46, 0xE0, 0x5F,
0xE4, 0xCA, 0xF1, 0x47, 0x9C, 0x69, 0xA5, 0x86, 0x38, 0x12, 0x78, 0x96, 0x5C, 0x39, 0x7E, 0x4B,
0xF9, 0xF9, 0x58, 0xEA, 0x78, 0xC7, 0x00, 0xFF, 0x26, 0x57, 0x8E, 0x85, 0x74, 0xE1, 0xA8, 0x1E,
0x75, 0xA7, 0x77, 0x00, 0x2F, 0x90, 0x2B, 0xC7, 0x9D, 0x94, 0x2D, 0x2B, 0x52, 0xC7, 0x9B, 0x01,
0x6C, 0x24, 0x57, 0x8E, 0x9F, 0x50, 0x36, 0x3B, 0x4A, 0x1D, 0x6F, 0x16, 0x99, 0x99, 0x55, 0x3B,
0xAE, 0x9B, 0x29, 0xDB, 0xE4, 0xA5, 0x8E, 0x37, 0x9B, 0x32, 0x15, 0x3D, 0x55, 0x8E, 0xEF, 0xE2,
0x34, 0x4D, 0x35, 0xC4, 0xB9, 0xE4, 0x66, 0x56, 0x0D, 0x00, 0xDF, 0xA0, 0xBC, 0x9A, 0x2B, 0x75,
0xBC, 0x8F, 0x91, 0x9B, 0x59, 0x35, 0x00, 0x7C, 0x25, 0x13, 0x4B, 0xAA, 0xEE, 0x02, 0x72, 0xC5,
0x18, 0x00, 0x2E, 0xC9, 0xC4, 0x92, 0xAA, 0xFB, 0x02, 0xD9, 0x72, 0x7C, 0x2A, 0x13, 0x4B, 0xAA,
0xEE, 0x0A, 0x72, 0xC5, 0xD8, 0x4E, 0xF9, 0x18, 0x27, 0x75, 0xBC, 0x1E, 0xE0, 0x1A, 0x72, 0xE5,
0xE8, 0xA7, 0xFC, 0x00, 0x20, 0x75, 0xBC, 0x41, 0xC0, 0x0D, 0xE4, 0xCA, 0xB1, 0x95, 0xF2, 0xD3,
0xB1, 0xD4, 0xF1, 0x7A, 0x29, 0x47, 0x02, 0xA4, 0xCA, 0xB1, 0x09, 0x38, 0x35, 0x92, 0x4C, 0xAA,
0x68, 0x30, 0x70, 0x2B, 0xB9, 0x72, 0x6C, 0x04, 0xA6, 0x47, 0x92, 0x49, 0x15, 0xED, 0x49, 0x39,
0x0B, 0x30, 0x55, 0x8E, 0x17, 0x80, 0xE3, 0x23, 0xC9, 0xA4, 0x8A, 0x86, 0x52, 0x8E, 0x58, 0x4E,
0x95, 0xE3, 0x79, 0xE0, 0xED, 0x91, 0x64, 0x52, 0x45, 0x23, 0x80, 0x7B, 0xC9, 0x95, 0x63, 0x0D,
0x70, 0x44, 0x24, 0x99, 0x54, 0xD1, 0x28, 0xE0, 0x7E, 0x72, 0xE5, 0x58, 0x05, 0x4C, 0x89, 0x24,
0x93, 0x2A, 0x1A, 0x0B, 0x2C, 0x21, 0x57, 0x8E, 0x7F, 0x02, 0x6F, 0x88, 0x24, 0x93, 0x2A, 0x3A,
0x00, 0x58, 0x4A, 0xAE, 0x1C, 0x4F, 0x00, 0x13, 0x22, 0xC9, 0xA4, 0x8A, 0x26, 0x50, 0xFE, 0xC3,
0xA6, 0xCA, 0xB1, 0x94, 0x52, 0x48, 0xA9, 0xE3, 0x4D, 0x02, 0x96, 0x91, 0x2B, 0xC7, 0x12, 0xCA,
0x47, 0x39, 0xA9, 0xE3, 0x1D, 0x06, 0xAC, 0x24, 0x57, 0x8E, 0xC5, 0x94, 0x1F, 0x01, 0xA4, 0x8E,
0xF7, 0x16, 0xCA, 0xCF, 0xAB, 0xA9, 0x72, 0x2C, 0x02, 0x86, 0x47, 0x92, 0x49, 0x15, 0x1D, 0x4D,
0x79, 0x30, 0x97, 0x2A, 0xC7, 0x5D, 0x94, 0x07, 0x8F, 0x52, 0xC7, 0x3B, 0x0E, 0x58, 0x4F, 0xAE,
0x1C, 0x3F, 0x03, 0x86, 0x44, 0x92, 0x49, 0x15, 0x9D, 0x08, 0xBC, 0x48, 0xAE, 0x1C, 0xF3, 0x29,
0x9B, 0x1D, 0xA5, 0x8E, 0x77, 0x0A, 0x65, 0x1B, 0x79, 0xAA, 0x1C, 0x3F, 0xA0, 0x6C, 0x93, 0x97,
0x3A, 0xDE, 0x99, 0x94, 0x73, 0xC1, 0x53, 0xE5, 0xB8, 0x1E, 0xC7, 0xF2, 0xA8, 0x21, 0xCE, 0x01,
0xB6, 0x91, 0x2B, 0xC7, 0x55, 0x99, 0x58, 0x52, 0x75, 0x1F, 0x21, 0x3B, 0xB3, 0xEA, 0x4B, 0x99,
0x58, 0x52, 0x75, 0x9F, 0x20, 0x57, 0x8C, 0x01, 0xE0, 0xA2, 0x4C, 0x2C, 0xA9, 0xBA, 0xCF, 0x91,
0x2B, 0xC6, 0x76, 0x60, 0x5E, 0x26, 0x96, 0x54, 0xDD, 0xE5, 0xE4, 0xCA, 0xD1, 0x0F, 0x7C, 0x38,
0x13, 0x4B, 0xAA, 0xEE, 0x2A, 0x72, 0xE5, 0xD8, 0x06, 0x9C, 0x95, 0x89, 0x25, 0x55, 0xD3, 0x03,
0x5C, 0x47, 0xAE, 0x1C, 0x5B, 0x80, 0xD3, 0x23, 0xC9, 0xA4, 0x8A, 0x7A, 0x29, 0x0F, 0xE5, 0x52,
0xE5, 0xE8, 0x03, 0x66, 0x46, 0x92, 0x49, 0x15, 0x0D, 0x06, 0x6E, 0x21, 0x57, 0x8E, 0x0D, 0xC0,
0xBB, 0x22, 0xC9, 0xA4, 0x8A, 0x86, 0x00, 0x3F, 0x25, 0x57, 0x8E, 0x75, 0xC0, 0xB4, 0x48, 0x32,
0xA9, 0xA2, 0xBD, 0x80, 0x05, 0xE4, 0xCA, 0xB1, 0x16, 0x98, 0x1A, 0x49, 0x26, 0x55, 0x34, 0x0C,
0xB8, 0x87, 0x5C, 0x39, 0x56, 0x03, 0x6F, 0x8A, 0x24, 0x93, 0x2A, 0x1A, 0x09, 0xFC, 0x9E, 0x5C,
0x39, 0x96, 0x03, 0x87, 0x44, 0x92, 0x49, 0x15, 0x8D, 0x01, 0x1E, 0x24, 0x57, 0x8E, 0x27, 0x81,
0x89, 0x91, 0x64, 0x52, 0x45, 0xC3, 0xC9, 0x0E, 0x74, 0x7B, 0x14, 0x78, 0x4D, 0x24, 0x99, 0x54,
0x83, 0xE4, 0xD9, 0x1C, 0x7F, 0x01, 0xC6, 0x65, 0x62, 0x49, 0xD5, 0x1D, 0x4F, 0xAE, 0x1C, 0x0F,
0x00, 0xA3, 0x33, 0xB1, 0xA4, 0x7A, 0xA4, 0xCE, 0xE7, 0xB8, 0x0F, 0xD8, 0x27, 0x94, 0x49, 0xAA,
0xC5, 0x48, 0xCA, 0x59, 0x7D, 0xAD, 0x2E, 0xC7, 0x42, 0x60, 0xEF, 0x50, 0x26, 0xA9, 0x36, 0xD3,
0x69, 0x7D, 0x39, 0x7E, 0x41, 0x39, 0x49, 0x4A, 0x5D, 0x6E, 0x50, 0xBB, 0x17, 0xD0, 0x02, 0x07,
0xB6, 0xF8, 0xFE, 0xB7, 0x01, 0xB3, 0x28, 0xD3, 0x4E, 0xD4, 0xE5, 0xBA, 0xB1, 0x20, 0x92, 0xFE,
0x87, 0x93, 0xF0, 0x23, 0x96, 0xF4, 0x5F, 0xED, 0x47, 0x66, 0x2A, 0xC9, 0xAF, 0xF0, 0x4B, 0xBA,
0x1A, 0x2A, 0x75, 0x98, 0xE6, 0x6F, 0x28, 0x87, 0x77, 0x4A, 0x8D, 0x32, 0x8B, 0x4C, 0x41, 0x06,
0x80, 0x3F, 0x00, 0xFB, 0x66, 0x62, 0x49, 0xF5, 0xB9, 0x83, 0x5C, 0x49, 0x1E, 0xA2, 0x7C, 0xB4,
0x93, 0x1A, 0x63, 0x14, 0x65, 0x8F, 0x54, 0xAA, 0x24, 0x0F, 0xE3, 0x19, 0x82, 0x6A, 0x98, 0xF4,
0x76, 0x77, 0x4F, 0xA1, 0x55, 0xE3, 0x8C, 0x04, 0x7E, 0x47, 0xAE, 0x24, 0xCB, 0x28, 0x87, 0x7C,
0x4A, 0x8D, 0x31, 0x0C, 0xF8, 0x35, 0xB9, 0x92, 0xAC, 0x04, 0x0E, 0x4D, 0x04, 0x93, 0xEA, 0x92,
0x1E, 0xDA, 0xF0, 0x0C, 0xE5, 0xD0, 0x4F, 0xA9, 0x31, 0xD2, 0x63, 0x7F, 0x9E, 0x03, 0xDE, 0x16,
0x49, 0x26, 0xD5, 0x64, 0x0F, 0xB2, 0x83, 0xE3, 0xD6, 0x03, 0xC7, 0x46, 0x92, 0x49, 0x35, 0xE9,
0x05, 0xBE, 0x4F, 0xAE, 0x24, 0x2F, 0x02, 0x27, 0x24, 0x82, 0x49, 0x75, 0xE9, 0x01, 0xBE, 0x49,
0xAE, 0x24, 0x7D, 0xC0, 0xC9, 0x91, 0x64, 0x52, 0x8D, 0xBE, 0x46, 0xAE, 0x24, 0x4E, 0x78, 0x57,
0x23, 0x5D, 0x46, 0xAE, 0x24, 0x9E, 0x11, 0xA2, 0x46, 0xBA, 0x88, 0x5C, 0x49, 0xFA, 0x81, 0x39,
0x99, 0x58, 0x52, 0x7D, 0xE6, 0x91, 0x2B, 0xC9, 0x76, 0xE0, 0xFC, 0x4C, 0x2C, 0xA9, 0x3E, 0x73,
0x29, 0x7F, 0xE1, 0x53, 0x45, 0xF9, 0x4C, 0x26, 0x96, 0x54, 0x9F, 0xB3, 0x29, 0xDF, 0x15, 0x52,
0x25, 0xB9, 0x34, 0x92, 0x4A, 0xAA, 0xD1, 0x19, 0x94, 0x5F, 0x9D, 0x52, 0x25, 0xF9, 0x6A, 0x26,
0x96, 0x54, 0x9F, 0xF7, 0x50, 0xC6, 0xFB, 0xA4, 0x4A, 0x72, 0x2D, 0xE5, 0xF9, 0x8C, 0xD4, 0x18,
0xEF, 0xA6, 0x3C, 0x09, 0x4F, 0x95, 0xE4, 0x3B, 0x38, 0x8E, 0x49, 0x0D, 0x73, 0x2C, 0x65, 0x4F,
0x55, 0xAA, 0x24, 0x3F, 0xA4, 0xEC, 0x19, 0x93, 0x1A, 0xE3, 0x28, 0xCA, 0xEE, 0xDC, 0x54, 0x49,
0x7E, 0x4C, 0x39, 0x91, 0x57, 0x6A, 0x8C, 0x37, 0x53, 0xDE, 0xF3, 0x48, 0x95, 0xE4, 0x0E, 0x1C,
0x50, 0xA7, 0x86, 0x39, 0x14, 0x58, 0x41, 0xAE, 0x24, 0x77, 0xE3, 0x80, 0x3A, 0x35, 0xCC, 0x41,
0x94, 0x77, 0xCF, 0x53, 0x25, 0xB9, 0x17, 0x07, 0xD4, 0xA9, 0x61, 0x5E, 0x0B, 0x3C, 0x4E, 0xAE,
0x24, 0xF7, 0x53, 0x46, 0x19, 0x49, 0x8D, 0xB1, 0x3F, 0xB0, 0x94, 0x5C, 0x49, 0x96, 0x00, 0x63,
0x23, 0xC9, 0xA4, 0x9A, 0x8C, 0x05, 0xFE, 0x44, 0xAE, 0x24, 0x4B, 0x29, 0xC5, 0x94, 0x1A, 0x63,
0x14, 0xB0, 0x98, 0x5C, 0x49, 0x1E, 0xA7, 0x7C, 0xC4, 0x93, 0x1A, 0x63, 0x38, 0xB0, 0x88, 0x5C,
0x49, 0x96, 0x51, 0x7E, 0x2C, 0x90, 0x1A, 0x63, 0x28, 0x70, 0x17, 0xB9, 0x92, 0xAC, 0xC0, 0x01,
0x75, 0x6A, 0x98, 0x21, 0xC0, 0xCF, 0xC9, 0x95, 0xE4, 0x19, 0xCA, 0x03, 0x4C, 0xA9, 0x31, 0x06,
0x03, 0xF3, 0xC9, 0x95, 0xE4, 0x39, 0xCA, 0x56, 0x18, 0xA9, 0x31, 0x7A, 0x81, 0x1B, 0xC9, 0x95,
0x64, 0x1D, 0x30, 0x2D, 0x92, 0x4C, 0xAA, 0x49, 0x0F, 0xF0, 0x2D, 0x72, 0x25, 0xD9, 0x80, 0x03,
0xEA, 0xD4, 0x40, 0x57, 0x93, 0x2B, 0x49, 0x1F, 0x30, 0x33, 0x13, 0x4B, 0xAA, 0xCF, 0xE5, 0xE4,
0x4A, 0xB2, 0x19, 0x38, 0x2D, 0x13, 0x4B, 0xAA, 0xCF, 0xC5, 0xE4, 0x4A, 0xB2, 0x15, 0xF8, 0x40,
0x26, 0x96, 0x54, 0x9F, 0x4F, 0x92, 0x2B, 0x49, 0x3F, 0xF0, 0xA1, 0x4C, 0x2C, 0xA9, 0x3E, 0xE7,
0x51, 0x06, 0xC7, 0x25, 0x4A, 0xB2, 0x1D, 0xF8, 0x78, 0x26, 0x96, 0x54, 0x9F, 0x73, 0xC8, 0xCE,
0xDE, 0xFA, 0x74, 0x26, 0x96, 0x54, 0x9F, 0x33, 0xC9, 0xCE, 0xDE, 0xBA, 0x24, 0x13, 0x4B, 0xAA,
0xCF, 0x29, 0x64, 0x67, 0x6F, 0x7D, 0x39, 0x13, 0x4B, 0xAA, 0xCF, 0x89, 0x64, 0x67, 0x6F, 0x7D,
0x1D, 0x07, 0xD4, 0xA9, 0x61, 0x8E, 0x23, 0x3B, 0x7B, 0xEB, 0xDB, 0x38, 0xA0, 0x4E, 0x0D, 0x73,
0x34, 0xF0, 0x3C, 0xB9, 0x92, 0xDC, 0x44, 0xD9, 0x33, 0x26, 0x35, 0xC6, 0x11, 0xC0, 0x1A, 0x72,
0x25, 0xB9, 0x15, 0x07, 0xD4, 0xA9, 0x61, 0x0E, 0x03, 0x56, 0x92, 0x2B, 0xC9, 0xED, 0x94, 0xF7,
0x58, 0xA4, 0xC6, 0x98, 0x44, 0x76, 0xF6, 0xD6, 0x2F, 0x29, 0x6F, 0x44, 0x4A, 0x8D, 0x31, 0x01,
0x78, 0x82, 0x5C, 0x49, 0x16, 0x51, 0xDE, 0xAD, 0x97, 0x1A, 0xE3, 0x00, 0xE0, 0x61, 0x72, 0x25,
0x59, 0x8C, 0x03, 0xEA, 0xD4, 0x30, 0xFB, 0x01, 0x0F, 0x91, 0x2B, 0x89, 0x03, 0xEA, 0xD4, 0x38,
0xA3, 0x28, 0xE3, 0x47, 0x53, 0x25, 0xF9, 0x1B, 0x0E, 0xA8, 0x53, 0xC3, 0x8C, 0xA0, 0x0C, 0xB2,
0x4E, 0x95, 0xC4, 0x01, 0x75, 0x6A, 0x9C, 0xA1, 0x94, 0x23, 0x11, 0x52, 0x25, 0x79, 0x0A, 0x98,
0x98, 0x08, 0x26, 0xD5, 0x65, 0x4F, 0xCA, 0xB3, 0x8B, 0x54, 0x49, 0x56, 0x00, 0x93, 0x23, 0xC9,
0xA4, 0x9A, 0x0C, 0xA6, 0x3C, 0x05, 0x4F, 0x95, 0x64, 0x35, 0x70, 0x78, 0x24, 0x99, 0x54, 0x93,
0x5E, 0xCA, 0x7E, 0xAA, 0x54, 0x49, 0xD6, 0x02, 0x53, 0x23, 0xC9, 0xA4, 0x9A, 0x0C, 0x02, 0x6E,
0x20, 0x57, 0x12, 0x07, 0xD4, 0xA9, 0x71, 0x7A, 0x80, 0x6B, 0xC8, 0x95, 0x64, 0x03, 0xF0, 0xCE,
0x48, 0x32, 0xA9, 0x46, 0x57, 0x90, 0x2B, 0x49, 0x1F, 0x70, 0x52, 0x26, 0x96, 0x54, 0x9F, 0xCF,
0x93, 0x2B, 0xC9, 0x66, 0xE0, 0x7D, 0x99, 0x58, 0x52, 0x7D, 0x2E, 0x20, 0x57, 0x92, 0xAD, 0xC0,
0x8C, 0x4C, 0x2C, 0xA9, 0x3E, 0x1F, 0x25, 0x37, 0x7B, 0x6B, 0x0D, 0x30, 0x26, 0x13, 0x4B, 0xAA,
0xCF, 0x07, 0x29, 0xD3, 0x15, 0x13, 0x25, 0xB9, 0x32, 0x13, 0x49, 0xAA, 0xD7, 0x6C, 0xCA, 0xC7,
0xA0, 0x56, 0x17, 0xE4, 0x59, 0x7C, 0xBF, 0x5D, 0x0D, 0x75, 0x2A, 0x99, 0xD9, 0x5B, 0x6F, 0x4D,
0x05, 0x92, 0xEA, 0x36, 0x03, 0xD8, 0x48, 0x6B, 0x0B, 0x32, 0x3B, 0x96, 0x26, 0xC4, 0xB9, 0x48,
0xBB, 0x8F, 0x05, 0x94, 0xE7, 0x16, 0x1B, 0x5A, 0xF8, 0x6F, 0x74, 0xDD, 0xEB, 0xBA, 0x16, 0x64,
0xF7, 0x72, 0x0F, 0x65, 0x8A, 0xE3, 0xBA, 0x16, 0xDD, 0x7F, 0xA0, 0x45, 0xF7, 0x95, 0xA2, 0x8E,
0xA4, 0x7C, 0xA9, 0xAE, 0xFB, 0x23, 0xD6, 0xF4, 0x64, 0x08, 0xA9, 0x95, 0xA6, 0x00, 0xAB, 0xA8,
0xAF, 0x1C, 0x5B, 0x28, 0x6F, 0x3C, 0x4A, 0x5D, 0xE3, 0x60, 0xE0, 0x69, 0xEA, 0x29, 0xC8, 0x2D,
0xE1, 0xB5, 0x4B, 0x11, 0xAF, 0x03, 0xFE, 0x4E, 0xB5, 0x72, 0x6C, 0xA2, 0x94, 0x4D, 0xEA, 0x4A,
0xE3, 0x81, 0x47, 0xD8, 0xF5, 0x82, 0xCC, 0xCD, 0x2F, 0x59, 0xCA, 0xDA, 0xD5, 0xD9, 0x5B, 0x17,
0xB7, 0x63, 0xB1, 0x52, 0x3B, 0x8C, 0x00, 0x6E, 0xE6, 0x95, 0x15, 0x63, 0x2D, 0xF0, 0xFE, 0xF6,
0x2C, 0x53, 0x6A, 0xAF, 0x63, 0x80, 0x1B, 0x79, 0xE9, 0x31, 0x0C, 0xFD, 0xC0, 0x83, 0xC0, 0x85,
0xC0, 0xC8, 0xB6, 0xAD, 0x2E, 0xC8, 0x63, 0xB8, 0xF4, 0x72, 0xF6, 0x07, 0x46, 0x53, 0x36, 0x3C,
0x2E, 0xA7, 0x1C, 0x15, 0x27, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x6A, 0x9A, 0xFF, 0x00, 0xBE, 0x4B, 0x38, 0xC0,
0xBE, 0x13, 0xF2, 0x13, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82};
std::string font_location = "C:\\Users\\topor\\Desktop\\ImGui-APP-master\\ImGui Application\Debug\\Montserrat-Regular.ttf";
menu::menu_data menu::m_menu_data;
menu::option_data menu::m_option_data [ 1024 ];

void menu::start( IDirect3DDevice9* device ) {


	if ( tImage == nullptr )D3DXCreateTextureFromFileInMemoryEx( device
		, &left_arrow, sizeof( left_arrow ),
		55, 55, D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &tImage );



}
void menu::option_slider ( const char * name, const char * description, float min, float max, float & value ) {


	ImGui::PushFont ( c_menu::get().bigf );
	ImGui::Text ( name );
	ImGui::PopFont ( );


	ImGui::SameLine ( );
	ImGui::PushItemWidth ( ImGui::GetWindowWidth ( ) / 3 );

	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 80 );
	ImGui::SliderFloat ( std::string ( "##slider" + std::string ( name ) ).data ( ), &value, min, max );
	ImGui::PopItemWidth ( );
	ImGui::PushFont ( c_menu::get ( ).smallf );

	ImGui::Text ( description );
	ImGui::PopFont ( );

}
void menu::option_slider_int ( const char * name, const char * description, int min, int max, int & value ) {


	ImGui::PushFont ( c_menu::get ( ).bigf );
	ImGui::Text ( name );
	ImGui::PopFont ( );

	ImGui::SameLine ( );
	ImGui::PushItemWidth ( ImGui::GetWindowWidth ( ) / 3 );

	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 80 );
	ImGui::SliderInt ( std::string ( "##slider" + std::string ( name ) ).data ( ), &value, min, max );
	ImGui::PopItemWidth ( );

	ImGui::PushFont ( c_menu::get ( ).smallf );

	ImGui::Text ( description );
	ImGui::PopFont ( );

}
void menu::option_multicombobox ( const char * name, const char * description, std::vector<combobox_select_item> multi_items ) {


	static float f = 0.f;
	ImGui::PushFont ( c_menu::get ( ).bigf );
	ImGui::Text ( name );
	ImGui::PopFont ( );

	ImGui::SameLine ( );
	ImGui::PushItemWidth ( ImGui::GetWindowWidth ( ) / 4 );

	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 320 );
	static const char * current_item = NULL;
	std::string preview = "";
	bool none_selected = false;
	for ( size_t i = 0; i < multi_items.size ( ); i++ ) {
		if ( *multi_items [ i ].value ) {
			if ( preview.length ( ) > 0 )
				preview += ", ";
			none_selected = true;
			preview += multi_items [ i ].name;
		}
	}
	if ( !none_selected )
		preview = "none";
	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 80 );
	if ( ImGui::BeginCombo ( std::string ( "##" + std::string ( name ) ).data ( ), preview.c_str ( ) ) ) {
		for ( int n = 0; n < multi_items.size ( ); n++ ) {
			//bool is_selected = ( current_item == multi_items [ n ].name );
			if ( ImGui::Selectable ( multi_items [ n ].name.c_str ( ), multi_items [ n ].value ) )
				current_item = multi_items [ n ].name.c_str ();
			if ( multi_items [ n ].value )
				ImGui::SetItemDefaultFocus ( );   // You may set the initial focus when opening the combo (scrolling + for keyboard navigation support)
		}
		ImGui::EndCombo ( );
	}
	ImGui::PopItemWidth ( );


	ImGui::PushFont ( c_menu::get ( ).smallf );

	ImGui::Text ( description );
	ImGui::PopFont ( );
}
void menu::option_combobox ( const char * name, const char * description, std::vector<std::string> items, int& value ) {

	static float f = 0.f;
	ImGui::PushFont ( c_menu::get().bigf );
	ImGui::Text ( name );
	ImGui::PopFont ( );

	ImGui::SameLine ( );
	ImGui::PushItemWidth ( ImGui::GetWindowWidth ( ) / 4 );

	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 320 );
	
	//static const char * current_item = NULL;
	ImGui::SetCursorPosX ( ImGui::GetWindowWidth ( ) - ImGui::CalcItemWidth ( ) - 80 );
	if ( ImGui::BeginCombo ( std::string ( "##combobox" + std::string ( name ) ).data ( ), items [ value ].c_str() )) {
		for ( int n = 0; n < items.size(); n++ ) {
			bool is_selected = ( value == n );
			if ( ImGui::Selectable ( items [ n ].data(), is_selected ) ) {
				//current_item = items [ n ].c_str ();
				value = n;
			}
			if ( is_selected )
				ImGui::SetItemDefaultFocus ( );
		}
		ImGui::EndCombo ( );
	}

	ImGui::PopItemWidth ( );


	ImGui::PushFont ( c_menu::get ( ).smallf );

	ImGui::Text ( description );
	ImGui::PopFont ( );

}
void menu::option_single ( const char * name, const char * description, bool & value, void * color ) {
	const ImGuiWindowFlags m_window_flags = ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings;


	ImGui::PushFont ( c_menu::get ( ).bigf );
	ImGui::Text ( name );
	ImGui::PopFont ( );
	if ( color ) {
		ImGui::SameLine ( ImGui::GetWindowWidth ( ) - 90 );
		static float color [ 3 ] = { 255, 0,0 };
		ImGui::ColorEdit3 ( "box color", color, ImGuiColorEditFlags_NoInputs );
	}
	ImGui::SameLine ( ImGui::GetWindowWidth ( ) - 60 );
	ImGui::Checkbox ( name, &value );
	ImGui::PushFont ( c_menu::get ( ).smallf );

	ImGui::Text ( description );
	ImGui::PopFont ( );




	
}

void menu::option ( const char * name, const char * description, std::function< void ( ) > func, int max_height, bool & value, void * color ) {
	const ImGuiWindowFlags m_window_flags = ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings;
	m_menu_data.option_index++;
	const ImGuiIO & io = ImGui::GetIO ( );
	//printf( "element at index " + m_menu_data.option_index );
	auto & data = menu::m_option_data [ m_menu_data.option_index ];
	data.max_height = max_height;
	bool hovered = false;
	ImVec2 rect_left;
	ImVec2  rect_right;

	ImGui::BeginChild ( name, ImVec2 ( 0, data.cur_height ), true, m_window_flags );
	{
		ImGui::PushFont ( c_menu::get().bigf );
		ImGui::Text ( name );
		 rect_left = ImGui::GetItemRectMin ( );
		ImGui::PopFont ( );
		if ( color ) {
			ImGui::SameLine ( ImGui::GetWindowWidth ( ) - 90 );
			static float color [ 3 ] = { 255, 0,0 };
			ImGui::ColorEdit3 ( std::string ( std::string ( name ) + std::string ( " color" ) ).data ( ), color, ImGuiColorEditFlags_NoInputs );
		}
		ImGui::SameLine ( ImGui::GetWindowWidth ( ) - 60 );
		ImGui::Checkbox ( name, &value );
		 rect_right = ImGui::GetItemRectMax ( );
		ImGui::PushFont ( c_menu::get ( ).smallf );

		ImGui::Text ( description );
		rect_right.y = ImGui::GetItemRectMax ( ).y;
		ImGui::PopFont ( );
		
		hovered = ImGui::IsMouseHoveringRect ( rect_left, rect_right );
		func ( );

	}

	ImGui::EndChild ( );
	if ( ImGui::IsItemHovered ( ) && hovered && io.MouseDown [ 0 ] && !data.in_transition ) {
		data.in_transition = true;
		data.enable = !data.enable;
	}
	if ( data.in_transition && max_height > 0 ) {
		if ( data.enable ) {
			if ( data.cur_height <= data.max_height ) {
				data.cur_height += 25;
			   //ImGui::GetWindowDrawList()->AddRectFilled(left, right )
			}
			else {
				data.in_transition = false;
				data.cur_height = data.max_height;
			}
		}
		else {
			if ( data.cur_height >= 25 ) {
				data.cur_height -= 25;
				if ( data.cur_height <= data.height )
					data.in_transition = false;
				//data.cur_height = 0;
			}
		}

	}



}
void menu::ragebot ( ) {
	option ( "Aimlock", "Turn aim on enemy", [ = ] ( ) {
		option_single ( "Name", "Draws a name on top of head", variables::visuals::enemy::name );
		option_single ( "Health", "Draws a health", variables::visuals::enemy::health );
		option_single ( "Box", "Draws a health", variables::visuals::enemy::box );
		option_single ( "Weapon", "Draws a health", variables::visuals::enemy::weapon );

	}, 400, variables::visuals::enemy::enabled );
}
	 static int tab_index = 0;
void menu::render_menu( )
{
	/* TIP: We can't let ImGui move our window */

	if ( !c_menu::get( ).opened )
		return;

	const ImGuiWindowFlags m_window_flags =  ImGuiWindowFlags_NoCollapse |ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoTitleBar;;

	//ImGui::SetNextWindowPos( ImVec2( 0, 0 ), ImGuiCond_Appearing );
	//ImGui::SetNextWindowSize( ImVec2( 800, 600 ), ImGuiCond_Always );

	
		 int element_index = 0;
	

		ImGui::PushFont( c_menu::get( ).normalf );
		ImGui::Begin( "ImGui Application" , &c_menu::get().opened , m_window_flags ); {
			ImVec4 color { ImColor( 25, 24, 25 ) };
			ImGui::PushStyleColor( ImGuiCol_ChildBg, color );
			ImGui::BeginChild( "ChildR", ImVec2( m_menu_data.width_transition, 0 ), false, m_window_flags ); {
				static int tabs_spacing = 10;
				if ( m_menu_data.show_tabs_buttons ) {
					ImGui::Dummy( ImVec2( 0, 280 ) );

					ImGui::Dummy ( ImVec2 ( 10, 0 ) );
					ImGui::SameLine ( );
					if ( ImGui::Button ( "rage", ImVec2 ( 212, 51 ) ) ) {
						tab_index = 0;
						visuals::notifications::add ( "MUIE STEAUA AI RATAT" );
					}
					ImGui::Dummy( ImVec2( 10, 0 ) );
					ImGui::SameLine( );
					if ( ImGui::Button ( "legit", ImVec2 ( 212, 51 ) ) )
						tab_index = 1;

					ImGui::Dummy ( ImVec2 ( 10, 0 ) );
					ImGui::SameLine ( );
					if ( ImGui::Button ( "visuals", ImVec2 ( 212, 51 ) ) )
						tab_index = 2;



				}
				else {
	
					ImGui::SetCursorPos( ImVec2( -2, ImGui::GetWindowHeight ( ) / 2 - 27.5 )  );
					ImGui::Image( c_menu::get().tImage, ImVec2( 55, 55 ) );
					
				}
			}
			ImGui::EndChild( );

			ImGui::PopStyleColor(  );
			if ( ImGui::IsItemHovered ( ImGuiHoveredFlags_RectOnly ) )
			{
				if ( !( m_menu_data.width_transition >= m_menu_data.width ) ) {
				
					m_menu_data.width_transition += 25;//( m_menu_data.width - m_menu_data.width_transition ) > 180 ?1:25;
					m_menu_data .show_tabs_buttons = true;
				}
				
			}
			else {
				if ( !( m_menu_data.width_transition <= m_menu_data.width_tabs ) ) {
					

					m_menu_data.width_transition -= 25;// m_menu_data.width_transition < 125?1:25;

					if ( m_menu_data.width_transition < 100 ) {
						m_menu_data.show_tabs_buttons = false;
				
					}
				}
			}

		
			ImGui::SameLine( );
			
			ImGui::BeginChild( "ChildL", ImVec2( 0, 0 ), true, m_window_flags );

			static bool asd3 = false;

			static float asddd [ 3 ] = { 255, 0,0 };//c_menu::get( ).opened 
			if ( tab_index == 0 )
				aimbot ( );

			m_menu_data.option_index = 0;
			ImGui::EndChild( );

		} 
		ImGui::PopFont( );
		ImGui::End( );

	}

void menu::render_visuals( ) {

}
	
